#!/bin/bash
REMOVE_COLORS="sed s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g"
COLOR_1="\e[3;1;94m"
COLOR_2="\e[96m"
COLOR_3="\e[3;1;91m"
COLOR_4="\e[3;1;93m"
COLOR_5="\e[3;1;92m"
COLOR_6="\e[3;1;95m"
RESET="\e[0m"

# Détection de la largeur du terminal
COLUMN=$(tput cols)
COLUMN_WIDTH=80

# Détermination de la largeur de la partie test
TEST_WIDTH=20

# Détection du chemin de l'exécutable minishell
if [ -x "./minishell" ]; then
	MINISHELL="./minishell"
elif [ -x "../minishell" ]; then
	MINISHELL="../minishell"
elif [ -x "../../minishell" ]; then
	MINISHELL="../../minishell"
else
	echo -e "\n${COLOR_3}Impossible de trouver l'exécutable 'minishell' \nL'exécutable doit se situer dans le répertoire actuel ou dans le répertoire parent."
	exit 1
fi

# Détection du chemin du fichier commands.txt
if [ -f "./commands.txt" ]; then
	COMMANDS_FILE="./commands.txt"
elif [ -f "Tester/commands.txt" ]; then
	COMMANDS_FILE="Tester/commands.txt"
elif [ -f "Tester/Tester_perso/commands.txt" ]; then
	COMMANDS_FILE="Tester/Tester_perso/commands.txt"
else
	echo -e "\n${COLOR_3}Impossible de trouver le fichier 'commands.txt' \nLe fichier doit se situer dans le répertoire actuel ou dans le répertoire parent."
	exit 1
fi

# Détection du chemin du fichier bash.supp
if [ -f "./.supp/bash.supp" ]; then
	SUPP="./.supp/bash.supp"
elif [ -f "../.supp/bash.supp" ]; then
	SUPP="../.supp/bash.supp"
elif [ -f "../../.supp/bash.supp" ]; then
	SUPP="../../.supp/bash.supp"
else
	echo -e "\n${COLOR_3}Impossible de trouver le fichier 'commands.txt' \nLe fichier doit se situer dans le répertoire actuel ou dans le répertoire parent."
	exit 1
fi
# Fonction pour afficher une ligne stylisée
function display_command {
	local command="$1"
	local test_nb="$2"
	local length=${#command}
	local remaining=$((COLUMN_WIDTH - length - TEST_WIDTH - ${#test_nb})) # Soustraction pour les bordures et les marges
	local diff_remaining=$((TEST_WIDTH - 2))
	printf "┃ ${COLOR_1}Commande:	${RESET}${COLOR_2}[%s]${RESET}%${remaining}s${test_nb}┃%${diff_remaining}s┃ \n" "$command"
}

function display_minishell {
	local minishell="$1"
	local diff_status="$2"
	local length=${#minishell}
	local remaining=$((COLUMN_WIDTH - length - TEST_WIDTH)) # Soustraction pour les bordures et les marges
	local diff_remaining=$((TEST_WIDTH / 4))
	if [ "$diff_status" == "1" ]; then
		local emote="✅"
		EMOTE_COLOR="\e[0m"
	else
		local emote="❌"
		EMOTE_COLOR="\e[5m"
	fi
	printf "┃ ${COLOR_1}Minishell:	${RESET}${COLOR_2}[%s]${RESET}%${remaining}s┃%${diff_remaining}sDiff: ${EMOTE_COLOR}%s${RESET}%${diff_remaining}s┃ \n" "$minishell" "" "" "$emote"
}

function display_bash {
	local bash="$1"
	local length=${#bash}
	local remaining=$((COLUMN_WIDTH - length - TEST_WIDTH)) # Soustraction pour les bordures et les marges
	local diff_remaining=$((TEST_WIDTH - 2))
	printf "┃ ${COLOR_1}Bash:		${RESET}${COLOR_2}[%s]${RESET}%${remaining}s┃%${diff_remaining}s┃ \n" "$bash" 
}

# Affichage de la ligne de séparation stylisée
function display_separator {
	printf "┏%s┳%s┓\n" "$(printf '━%.0s' $(seq 1 $((COLUMN_WIDTH - 3))))" "$(printf '━%.0s' $(seq 1 $((TEST_WIDTH - 2))))"
}

# Affichage de la ligne de fin stylisée
function display_end {
	printf "┗%s┻%s┛\n" "$(printf '━%.0s' $(seq 1 $((COLUMN_WIDTH - 3))))" "$(printf '━%.0s' $(seq 1 $((TEST_WIDTH - 2))))"
}

# Initialisation du séparateur
separator=0

# Compter le nombre de lignes dans commands.txt
num_lines=$(wc -l < "$COMMANDS_FILE")

rm -f valgrind.txt
while IFS= read -r command; do
    # Exécution de la commande valgrind pour chaque test
    valgrind_result=$(echo -ne "$command" | valgrind --leak-check=full --show-reachable=yes --suppressions="$SUPP" --trace-children=yes --track-fds=yes --show-leak-kinds=all "$MINISHELL" 2>&1)
     
    # Écrire le résultat dans le fichier valgrind.txt
    echo -ne "${COLOR_5}[$command]" >> valgrind.txt
    echo -ne "${COLOR_2}" >> valgrind.txt
	echo -ne "$valgrind_result" | cut -d' ' -f2- | head -n -3 | tail -n +9 >> valgrind.txt
    echo -ne "${RESET}" >> valgrind.txt
    echo >> valgrind.txt # Ajouter une ligne vide après chaque résultat

done < "$COMMANDS_FILE"
# Supprimer le fichier texte existant s'il existe

# Si un seul test
if [ "$num_lines" -eq 1 ]; then
	display_separator
	display_line ""
	display_end
else
	i=0
	j=0
	emojis=()
	# Boucle sur les commandes dans le fichier commands.txt
	while IFS= read -r command; do
		((j++))
		# Exécution de la commande dans Minishell
		minishell_result=$(echo -e "$command" | "$MINISHELL" 2> /dev/null)
		minishell_result=$(echo "$minishell_result" | sed '1d' | sed '2d')
		bash_result=$(bash -c "$command" 2>&1)
		if [ "$minishell_result" = "$bash_result" ]; then
			status="1"
			((i++))
			emojis+=("${COLOR_4}✅") # Ajout d'un seul emoji pour chaque test réussi
		else
			status="2"
			emojis+=("${COLOR_5}❌")  # Ajout d'un seul emoji pour chaque test échoué
		fi
		# Affichage des résultats stylisés
		if [ "$separator" == 0 ]; then
			display_separator
			separator=1
		else
			printf "┣%s╋%s┫\n" "$(printf '━%.0s' $(seq 1 $((COLUMN_WIDTH - 3))))" "$(printf '━%.0s' $(seq 1 $((TEST_WIDTH - 2))))"
		fi
		display_command "$command" "$j"
		display_minishell "$minishell_result" "$status"
		display_bash "$bash_result"
		separator="┣"
	done < "$COMMANDS_FILE"
	display_end
	COLS="$(tput cols)"
	ind=0
	end=0
	while [ "$ind" -ne "$j" ]; do
		em="${emojis[ind]}" # Accès à la valeur actuelle de emojis à l'indice ind
		echo -ne " ${COLOR_2}$(($ind + 1)):$em " # Utilisation de la variable em sans guillemets
		ind=$((ind + 1))
	done


	if [ "$i" -eq "$j" ]; then
		printf "${COLOR_4}\nFélicitations vous avez réussi tous les tests : ${COLOR_5}%d ${COLOR_4}/ ${COLOR_5}%d ${COLOR_4}!\n" ${i} ${j} 
	else
		printf "\n${COLOR_5}%d ${COLOR_6}tests réussis sur ${COLOR_5}%d ${COLOR_6}!\n" ${i} ${j}
	fi
fi
